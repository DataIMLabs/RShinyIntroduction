[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introductie R en Shiny",
    "section": "",
    "text": "Index",
    "crumbs": [
      "Index"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introductie",
    "section": "",
    "text": "Welkom bij de cursus R en Shiny. Deze cursus heeft als doel om jouw kennis van R en Shiny op het gebied van data-analyse en visualisatie te verrijken.\nGedurende deze cursus zullen we geavanceerde R-technieken en hun toepassing binnen Shiny uitgebreid behandelen. U leert hoe u solide, gebruiksvriendelijke web-applicaties creëert die uw onderzoek onderscheiden en de impact ervan versterken. Aan de hand van praktijkvoorbeelden en casestudies begeleiden we u bij het ontwikkelen van uw eigen projecten, variërend van simpele apps die data in realtime visualiseren tot complexe applicaties met uitgebreide gebruikersinteracties.\nDe cursus is opgedeeld in verschillende modules:\nModule 1 geeft een introductie",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie</span>"
    ]
  },
  {
    "objectID": "mod1_basis.html",
    "href": "mod1_basis.html",
    "title": "Basis R",
    "section": "",
    "text": "In deze les verkennen we de basisconcepten van R die essentieel zijn voor data-analyse, data-manipulatie en het opzetten van dashboards in Shiny. We behandelen het werken met variabelen, de verschillende datatypes in R, en eenvoudige operaties",
    "crumbs": [
      "Basis R"
    ]
  },
  {
    "objectID": "mod1_variables.html",
    "href": "mod1_variables.html",
    "title": "2  Variablen",
    "section": "",
    "text": "Een variabele is een verwijzing naar een waarde in het geheugde nvan de computer. De waarde van een variabele kan tijdens de uitvoering van het programma veranderen. We gebruiken de toewijzingsoperator &lt;- om waarden toe te wijzen aan variabelen.\nx &lt;- 5\nx &lt;- x + 1\nprint(x)",
    "crumbs": [
      "Basis R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Variablen</span>"
    ]
  },
  {
    "objectID": "mod1_datatypes.html",
    "href": "mod1_datatypes.html",
    "title": "3  Data types",
    "section": "",
    "text": "3.1 Vectoren\nIn R is alles een vector. Zelfs enkelvoudige waarden, zoals getallen of strings, worden behandeld als vectoren van lengte één. Dit is een fundamenteel aspect van R en heeft grote invloed op hoe berekeningen op data worden uitgevoerd.\nZie ter illustratie onderstaande codevoorbeelden in JavaScript en R, waarin we aan elk element van een collectie getallen (1,2,3,4,5) het getal 1 willen optellen.\nIn JavaScript vereist dat een for-loop over de elementen van een array:",
    "crumbs": [
      "Basis R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data types</span>"
    ]
  },
  {
    "objectID": "mod1_datatypes.html#vectoren",
    "href": "mod1_datatypes.html#vectoren",
    "title": "3  Data types",
    "section": "",
    "text": "let x = [1, 2, 3, 4, 5];\n\nfor(i = 0; i &lt; x.length; i++) {\n   x[i] += 1;\n}\n\nconsole.log(x);\n\n\nlet x = [1, 2, 3, 4, 5];\n\nfor(i = 0; i &lt; x.length; i++) {\n   x[i] += 1;\n}\n\nconsole.log(x);",
    "crumbs": [
      "Basis R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data types</span>"
    ]
  },
  {
    "objectID": "mod1_datatypes.html#atomische-datastructuren",
    "href": "mod1_datatypes.html#atomische-datastructuren",
    "title": "3  Data types",
    "section": "3.2 Atomische datastructuren",
    "text": "3.2 Atomische datastructuren\n\n\n\n\n\n flowchart TD\n        B[Atomic] --&gt; L[Logical]\n        B --&gt; N[Numerical]\n        N --&gt; I[Integer]\n        N --&gt; D[Double]\n        B --&gt; Z[Complex]\n        B --&gt; R[Raw]\n        NA[Non-atomic]\n        NA --&gt;  L2[List]\n        L2 --&gt; DF[data.frame]\n        L2 --&gt; DT[data.table]",
    "crumbs": [
      "Basis R",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data types</span>"
    ]
  },
  {
    "objectID": "mod1_flow.html",
    "href": "mod1_flow.html",
    "title": "4  Flow",
    "section": "",
    "text": "4.1 Voorwaardelijke uitvoer\nConditionele statements laten je toe om te beslissen welke code uitgevoerd moet worden afhankelijk van bepaalde voorwaarden.",
    "crumbs": [
      "Basis R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flow</span>"
    ]
  },
  {
    "objectID": "mod1_flow.html#voorwaardelijke-uitvoer",
    "href": "mod1_flow.html#voorwaardelijke-uitvoer",
    "title": "4  Flow",
    "section": "",
    "text": "4.1.1 if / else\n\nR\n\n\nx &lt;- 5\n\nif (x &gt; 0) {\n  print(\"x is positief\")\n} else if (x &lt; 0) {\n  print(\"x is negatief\")\n} else {\n  print(\"x is nul\")\n} \n\n\n\n\n\n4.1.2 switch",
    "crumbs": [
      "Basis R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flow</span>"
    ]
  },
  {
    "objectID": "mod1_flow.html#loops",
    "href": "mod1_flow.html#loops",
    "title": "4  Flow",
    "section": "4.2 Loops",
    "text": "4.2 Loops\nLoops maken het mogelijk om code meerdere keren uit te voeren.\n\n4.2.1 For Loops\nEen for-loop werkt als volgt:\n\nR\n\n\n# Initialiseer een vector\nvect &lt;- 1:5\n\nfor (i in vect) {\n  print(i^2)  # Kwadrateer elk element en geef de output weer \n}\n\n\n\n\n\n4.2.2 While-loop\n\nRR2\n\n\ncount &lt;- 1\n\nwhile(count &lt;= 5) {\n    print(count)\n    count &lt;- count + 1\n}\n\n\ntest\n\n\n\n\n\n4.2.3 Repeat Loops\nDe repeat loop voert een blok code uit tot het onderbroken wordt door een break statement.\n\nR\n\n\ncount &lt;- 1\n\nrepeat {\n    print(count)\n    if(count &gt;= 5) {\n        break  # Verlaat de loop als count groter of gelijk aan 5 is\n    }\n    count &lt;- count + 1\n}",
    "crumbs": [
      "Basis R",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Flow</span>"
    ]
  },
  {
    "objectID": "mode2_fp.html",
    "href": "mode2_fp.html",
    "title": "5  Functioneel Programmeren",
    "section": "",
    "text": "Functioneel programmeren is een paradigma dat benadrukt dat de output van een functie uitsluitend afhankelijk is van de input, zonder bijeffecten. Dit paradigma helpt om code te versimpelen en versnellen, vooral bij data manipulatie en analyse taken in R.\nHet `purrr` package biedt een consistente en complete set gereedschappen voor functioneel programmeren in R, waardoor het werken met functies en vectoren intuïtiever en minder foutgevoelig wordt.\n\n5.0.0.1 Kernconcept: `map` Functies in `purrr`\nDe `map` functies zijn essentieel binnen `purrr` voor het toepassen van een bewerking op elk element van een lijst of vector, zonder expliciet een lus te gebruiken. Dit maakt de code efficiënter en leesbaarder.\n\n5.0.0.1.1 Voorbeeld: Toepassen van `map` Functies\nStel, we hebben een lijst met numerieke vectoren en willen het gemiddelde van elk berekenen:\nlibrary(purrr) nummeriekeLijst \\&lt;- list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))s\ngemiddelden &lt;- map_dbl(nummeriekeLijst, mean)\nprint(gemiddelden)",
    "crumbs": [
      "Module 2 - Data handling met data.table",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Functioneel Programmeren</span>"
    ]
  }
]