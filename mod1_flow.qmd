# Control flow 
Control flow verwijst naar de mechanismen die de volgorde en logica van het R-script of de applicatie bepalen. Enkele veelgebruikte control flow structuren in R zijn: 

- voorwaardelijke uitvoer (`if`, `else if`, `else`), 
- herhaalde uitvoer (`for`, `while`), en de `repeat` loop; we zullen ook kort de `break` en `next` statements aanstippen. 

Het bijzondere aan R is dat control flow structuren ook kunnen worden aangeroepen via zogeheten control-flow functies.

|Doel|Control-flow syntax|Functionele vorm|Retourneert|
| ----- | --- |----|---|
|Voorwaardelijke uitvoer|`if`, `else if`, `else`| `````  `if`()  ````` |De waarde van de laatstgeëvalueerde expressie. 



## Voorwaardelijke statements 
Conditionele statements laten je toe om te beslissen welke code uitgevoerd moet worden afhankelijk van bepaalde voorwaarden.

### if / else if / else 
  
De `if` / `else if` / `else` control-flow statements worden gebruikt om beslissingen te nemen in de code. Als een gespecificeerde voorwaarde waar (TRUE) is, wordt de code gedefinieerd in de `if`-clausule uitgevoerd. Zo niet, dan kan als alternatief een zogeheten `else` of `else-if` codeblok worden gedefinieerd.  
  
```R
x <- 5 

if (x > 0) {
  print("x is positief")
} else if (x < 0) {
  print("x is negatief")
} else {
  print("x is nul")
} 
```    
Het `if`-statement in R kan ook worden aangeroepen in zogeheten `functionele vorm`, dat wil zeggen: elk `if` statement kan worden omgeschreven naar een functie-aanroep van de `````  `if`()  `````-funtie. 

```R
y <- `if`(1 < 2, TRUE, FALSE)
y <- if(1 < 2) TRUE else FALSE
```



### switch

In R kan een switch-statement gebruikt worden om één van vele codeblokken te selecteren die uitgevoerd moeten worden. Een belangrijk kenmerk van het switch-statement is dat het direct het resultaat van de overeenkomende case teruggeeft. Dit betekent dat je het resultaat van een switch-statement direct kunt toewijzen aan een variabele. 

  
```r
# Definieer de variabele
dag <- 4

# Gebruik switch om de waarde van de variabele te vergelijken met verschillende gevallen
resultaat <- switch(dag,
  "1" = "Maandag",
  "2" = "Dinsdag",
  "3" = "Woensdag",
  "4" = "Donderdag",
  "5" = "Vrijdag",
  "6" = "Zaterdag",
  "7" = "Zondag",
  "Onbekende dag"
)

# Print het resultaat
print(resultaat)

``` 

## Herhaalde uitvoer
Loops maken het mogelijk om code meerdere keren uit te voeren.

### For Loops
Een `for`-loop herhaalt de code een vastgesteld aantal keer. 
  
```R  
for (i in 1:5) {
  print(i)  
}
```   
 

### While 
```R
count <- 1

while(count <= 5) {
    print(count)
    count <- count + 1
}

```
 
### Repeat 

De repeat loop voert een blok code uit tot het onderbroken wordt door een break statement.

 
## R
```R
count <- 1

repeat {
    print(count)
    if(count >= 5) {
        break  # Verlaat de loop als count groter of gelijk aan 5 is
    }
    count <- count + 1
}
``` 
