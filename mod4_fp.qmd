# Functioneel Programmeren

Functioneel programmeren is een paradigma dat benadrukt dat de output van een functie uitsluitend afhankelijk is van de input, zonder bijeffecten. Dit paradigma helpt om code te versimpelen en versnellen, vooral bij data manipulatie en analyse taken in R.

De basis voor functioneel programmeren ligt in de zogeheten `apply`-functies, waaronder `apply`, `lapply`, `sapply`, en `mapply`. Deze functies voeren een bewerking uit op een of meerdere collecties van input-elementen en retourneren een dienovereenkomstig output object. 

Het `purrr` package biedt een meer consistente en complete set gereedschappen voor functioneel programmeren in R, waardoor het werken met functies en vectoren intuïtiever en minder foutgevoelig wordt vergeleken met de basis R tools.
 

## `apply` Functies in `base R`
 
## `map` Functies in `purrr`

De \`map\` functies zijn essentieel binnen \`purrr\` voor het toepassen van een bewerking op elk element van een lijst of vector, zonder expliciet een lus te gebruiken. Dit maakt de code efficiënter en leesbaarder.

Voorbeeld: Toepassen van \`map\` Functies

Stel, we hebben een lijst met numerieke vectoren en willen het gemiddelde van elk berekenen:

``` r
library(purrr) nummeriekeLijst \<- list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))s

gemiddelden \<- map_dbl(nummeriekeLijst, mean)

print(gemiddelden)
```
